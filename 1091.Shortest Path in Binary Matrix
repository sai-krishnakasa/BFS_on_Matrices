Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.

A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:

All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.

 

Example 1:


Input: grid = [[0,1],[1,0]]
Output: 2
Example 2:


Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4
Example 3:

Input: grid = [[1,0,0],[1,1,0],[1,1,0]]
Output: -1
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 100
grid[i][j] is 0 or 1

                                                                    SOLUTION:
                          
class Solution {
public:
    bool isvalid(int ni,int nj,int m,int n){
        if(ni<0 or ni>=m or nj<0 or nj>=n){
            return false;
        }
        return true;
        
    }
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) 
    {   int m=grid.size();
        int n=grid[0].size();
     if(n==1 && grid[0][0]==0)return 1;
        if(grid[0][0]==1)return -1;
        if(grid[n-1][n-1]==1)return -1;
        int di[8]={-1,-1,1,1,0,1,0,-1};
        int dj[8]={-1,1,1,-1,1,0,-1,0};
        vector<vector<int>>vis(m,vector<int>(n,0));
        queue<pair<pair<int,int>,int>>q;
        q.push({{0,0},1});
        vis[0][0]=1;
        while(!q.empty()){
            auto it=q.front();
            int i=it.first.first;
            int j =it.first.second;
            int steps=it.second;
            q.pop();
            for(int k=0;k<8;k++){
             int ni=i+di[k];
             int  nj=j+dj[k];
                if(isvalid(ni,nj,m,n)and grid[ni][nj]==0 and vis[ni][nj]==0 ){
                    if(ni==m-1 and nj==n-1){
                        return steps+1;
                    }
                    q.push({{ni,nj},steps+1});
                    vis[ni][nj]=1;
                }
            }
        }
        return -1;
        
    }
};
