695. Max Area of Island
You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may
assume all four edges of the grid are surrounded by water.
The area of an island is the number of cells with a value 1 in the island.
Return the maximum area of an island in grid. If there is no island, return 0.
Example 1:
Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],
[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.
Example 2:
Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0
Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 50
grid[i][j] is either 0 or 1.

                                   SOLUTION:
     class Solution {
public:
    int find(vector<vector<int>>&grid,int i,int j,vector<vector<int>>&vis){
        queue<pair<int,int>>q;
        int count=0;
        q.push({i,j});
        vis[i][j]=1;
        int dx[4]={0,0,1,-1};
        int dy[4]={1,-1,0,0};
        while(!q.empty()){
            auto it=q.front();
            int a=it.first;
            int b=it.second;
            q.pop();
            for(int k=0;k<4;k++){
                int new_a=a+dx[k];
                int new_b=b+dy[k];
                if(new_a>=0 and new_b>=0 and new_a<grid.size() and new_b<grid[0].size() and grid[new_a][new_b]==1 and vis[new_a][new_b]==-1)
                {   count++;
                    q.push({new_a,new_b});
                    vis[new_a][new_b]=1;
                }
            }
        }
        return count+1;
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        vector<vector<int>>vis(grid.size(),vector<int>(grid[0].size(),-1));
        int maxi=0;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==1 and vis[i][j]==-1)
                {
                   // cout<<maxi<<endl;
                    maxi=max(maxi,find(grid,i,j,vis));
                }
            }
        }return maxi;
    }
};
